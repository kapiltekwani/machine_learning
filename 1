diff --git a/LinearRegressionCaseStudy.ipynb b/LinearRegressionCaseStudy.ipynb
index ee996a9..0fe1667 100644
--- a/LinearRegressionCaseStudy.ipynb
+++ b/LinearRegressionCaseStudy.ipynb
@@ -2,64 +2,13 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 1,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "   symboling  fueltype  aspiration  doornumber  enginelocation  wheelbase  \\\n",
-      "0          3         1           1           2               1       88.6   \n",
-      "1          3         1           1           2               1       88.6   \n",
-      "2          1         1           1           2               1       94.5   \n",
-      "3          2         1           1           4               1       99.8   \n",
-      "4          2         1           1           4               1       99.4   \n",
-      "\n",
-      "   carlength  carwidth  carheight  curbweight  ...    NISSAN  PEUGEOT  \\\n",
-      "0      168.8      64.1       48.8        2548  ...         0        0   \n",
-      "1      168.8      64.1       48.8        2548  ...         0        0   \n",
-      "2      171.2      65.5       52.4        2823  ...         0        0   \n",
-      "3      176.6      66.2       54.3        2337  ...         0        0   \n",
-      "4      176.6      66.4       54.3        2824  ...         0        0   \n",
-      "\n",
-      "   PLYMOUTH  PORSCHE  RENAULT  SAAB  SUBARU  TOYOTA  VOLKSWAGEN  VOLVO  \n",
-      "0         0        0        0     0       0       0           0      0  \n",
-      "1         0        0        0     0       0       0           0      0  \n",
-      "2         0        0        0     0       0       0           0      0  \n",
-      "3         0        0        0     0       0       0           0      0  \n",
-      "4         0        0        0     0       0       0           0      0  \n",
-      "\n",
-      "[5 rows x 64 columns]\n",
-      "   symboling  fueltype  aspiration  doornumber  enginelocation  wheelbase  \\\n",
-      "0   0.433171  0.097561    0.180488   -0.560976        0.014634  -0.296110   \n",
-      "1   0.433171  0.097561    0.180488   -0.560976        0.014634  -0.296110   \n",
-      "2   0.033171  0.097561    0.180488   -0.560976        0.014634  -0.124099   \n",
-      "3   0.233171  0.097561    0.180488    0.439024        0.014634   0.030420   \n",
-      "4   0.233171  0.097561    0.180488    0.439024        0.014634   0.018758   \n",
-      "\n",
-      "   carlength  carwidth  carheight  curbweight    ...       NISSAN   PEUGEOT  \\\n",
-      "0  -0.078347 -0.150650  -0.410407   -0.002935    ...    -0.087805 -0.053659   \n",
-      "1  -0.078347 -0.150650  -0.410407   -0.002935    ...    -0.087805 -0.053659   \n",
-      "2  -0.042526 -0.033984  -0.110407    0.103737    ...    -0.087805 -0.053659   \n",
-      "3   0.038071  0.024350   0.047927   -0.084781    ...    -0.087805 -0.053659   \n",
-      "4   0.038071  0.041016   0.047927    0.104125    ...    -0.087805 -0.053659   \n",
-      "\n",
-      "   PLYMOUTH  PORSCHE   RENAULT      SAAB    SUBARU    TOYOTA  VOLKSWAGEN  \\\n",
-      "0 -0.034146 -0.02439 -0.009756 -0.029268 -0.058537 -0.156098   -0.058537   \n",
-      "1 -0.034146 -0.02439 -0.009756 -0.029268 -0.058537 -0.156098   -0.058537   \n",
-      "2 -0.034146 -0.02439 -0.009756 -0.029268 -0.058537 -0.156098   -0.058537   \n",
-      "3 -0.034146 -0.02439 -0.009756 -0.029268 -0.058537 -0.156098   -0.058537   \n",
-      "4 -0.034146 -0.02439 -0.009756 -0.029268 -0.058537 -0.156098   -0.058537   \n",
-      "\n",
-      "      VOLVO  \n",
-      "0 -0.053659  \n",
-      "1 -0.053659  \n",
-      "2 -0.053659  \n",
-      "3 -0.053659  \n",
-      "4 -0.053659  \n",
-      "\n",
-      "[5 rows x 63 columns]\n",
       "[False False False False  True False False  True False  True  True  True\n",
       "  True False False False False False False False False False False False\n",
       " False False False False  True  True  True False  True  True  True False\n",
@@ -68,11 +17,7 @@
       " False False False]\n",
       "[44 15 17 40  1  8  3  1  9  1  1  1  1 20 43 11 28 18 22 21 23 24 45 38\n",
       "  2 37  6 30  1  1  1 46  1  1  1 41 27 12 47 29 25 48 42  1 39 19 14 13\n",
-      " 32 26 36 49 10 35  1 16  1 31  4  7 34 33  5]\n",
-      "Index([u'enginelocation', u'carwidth', u'curbweight', u'enginesize',\n",
-      "       u'boreratio', u'stroke', u'rotor', u'five', u'four', u'three',\n",
-      "       u'twelve', u'two', u'BMW', u'PEUGEOT', u'PORSCHE'],\n",
-      "      dtype='object')\n"
+      " 32 26 36 49 10 35  1 16  1 31  4  7 34 33  5]\n"
      ]
     },
     {
@@ -170,8 +115,6 @@
     "car_prices = pd.concat([car_prices,car_company_name] ,axis=1)\n",
     "car_prices.drop(['company_name'],axis=1,inplace=True)\n",
     "\n",
-    "print(car_prices.head())\n",
-    "\n",
     "def normalize (x):\n",
     "    return ((x-np.mean(x))/(max(x) - min(x)))\n",
     "\n",
@@ -186,7 +129,6 @@
     "       'CHEVROLET', 'DODGE', 'HONDA', 'ISUZU', 'JAGUAR', 'MAZDA','MERCURY', 'MITSUBISHI', 'NISSAN', 'PEUGEOT', 'PLYMOUTH',\n",
     "       'PORSCHE', 'RENAULT', 'SAAB', 'SUBARU', 'TOYOTA', 'VOLKSWAGEN','VOLVO']]\n",
     "\n",
-    "print(X.head())\n",
     "\n",
     "\n",
     "#random_state is the seed used by the random number generator, it can be any integer.\n",
@@ -198,9 +140,9 @@
     "print(rfe.support_)\n",
     "print(rfe.ranking_)\n",
     "\n",
-    "print(X_train.columns[rfe.support_])\n",
     "col = X_train.columns[rfe.support_]\n",
     "X_train_rfe = X_train[col]\n",
+    "X_test_rfe = X_test[col]\n",
     "\n",
     "\n",
     "#function for calculating VIF\n",
@@ -225,16 +167,16 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 2,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
-       "<matplotlib.axes._subplots.AxesSubplot at 0x1103955d0>"
+       "<matplotlib.axes._subplots.AxesSubplot at 0x1150aed90>"
       ]
      },
-     "execution_count": 4,
+     "execution_count": 2,
      "metadata": {},
      "output_type": "execute_result"
     },
@@ -256,7 +198,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 3,
    "metadata": {},
    "outputs": [
     {
@@ -266,43 +208,42 @@
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.939\n",
-      "Model:                            OLS   Adj. R-squared:                  0.933\n",
-      "Method:                 Least Squares   F-statistic:                     141.8\n",
-      "Date:                Sun, 24 Jun 2018   Prob (F-statistic):           1.03e-70\n",
-      "Time:                        02:46:48   Log-Likelihood:                 232.74\n",
-      "No. Observations:                 143   AIC:                            -435.5\n",
-      "Df Residuals:                     128   BIC:                            -391.0\n",
+      "Model:                            OLS   Adj. R-squared:                  0.932\n",
+      "Method:                 Least Squares   F-statistic:                     141.7\n",
+      "Date:                Sun, 24 Jun 2018   Prob (F-statistic):           4.54e-71\n",
+      "Time:                        16:48:23   Log-Likelihood:                 232.09\n",
+      "No. Observations:                 143   AIC:                            -436.2\n",
+      "Df Residuals:                     129   BIC:                            -394.7\n",
       "Df Model:                          14                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==================================================================================\n",
       "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
       "----------------------------------------------------------------------------------\n",
-      "const              0.0047      0.004      1.084      0.280      -0.004       0.013\n",
-      "enginelocation    -0.3151      0.067     -4.700      0.000      -0.448      -0.182\n",
-      "carwidth           0.3119      0.056      5.548      0.000       0.201       0.423\n",
-      "curbweight         0.3401      0.067      5.048      0.000       0.207       0.473\n",
-      "enginesize         1.1118      0.143      7.786      0.000       0.829       1.394\n",
-      "boreratio         -0.3576      0.054     -6.662      0.000      -0.464      -0.251\n",
-      "stroke            -0.2515      0.044     -5.666      0.000      -0.339      -0.164\n",
-      "rotor              0.2141      0.030      7.193      0.000       0.155       0.273\n",
-      "five               0.1421      0.029      4.819      0.000       0.084       0.200\n",
-      "four               0.2030      0.035      5.819      0.000       0.134       0.272\n",
-      "three              0.4091      0.067      6.095      0.000       0.276       0.542\n",
-      "twelve            -0.4008      0.088     -4.553      0.000      -0.575      -0.227\n",
-      "two                0.2141      0.030      7.193      0.000       0.155       0.273\n",
-      "BMW                0.2535      0.024     10.632      0.000       0.206       0.301\n",
-      "PEUGEOT           -0.0981      0.024     -4.115      0.000      -0.145      -0.051\n",
-      "PORSCHE            0.1599      0.040      3.965      0.000       0.080       0.240\n",
-      "==============================================================================\n",
-      "Omnibus:                       22.727   Durbin-Watson:                   1.862\n",
-      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               38.186\n",
-      "Skew:                           0.769   Prob(JB):                     5.10e-09\n",
-      "Kurtosis:                       5.011   Cond. No.                     6.13e+16\n",
+      "enginelocation    -0.3067      0.067     -4.602      0.000      -0.439      -0.175\n",
+      "carwidth           0.3086      0.056      5.494      0.000       0.197       0.420\n",
+      "curbweight         0.3417      0.067      5.070      0.000       0.208       0.475\n",
+      "enginesize         1.0923      0.142      7.706      0.000       0.812       1.373\n",
+      "boreratio         -0.3531      0.054     -6.594      0.000      -0.459      -0.247\n",
+      "stroke            -0.2479      0.044     -5.596      0.000      -0.336      -0.160\n",
+      "rotor              0.2103      0.030      7.110      0.000       0.152       0.269\n",
+      "five               0.1397      0.029      4.748      0.000       0.081       0.198\n",
+      "four               0.1965      0.034      5.714      0.000       0.128       0.265\n",
+      "three              0.4015      0.067      6.011      0.000       0.269       0.534\n",
+      "twelve            -0.3893      0.087     -4.452      0.000      -0.562      -0.216\n",
+      "two                0.2103      0.030      7.110      0.000       0.152       0.269\n",
+      "BMW                0.2527      0.024     10.598      0.000       0.206       0.300\n",
+      "PEUGEOT           -0.0962      0.024     -4.044      0.000      -0.143      -0.049\n",
+      "PORSCHE            0.1623      0.040      4.028      0.000       0.083       0.242\n",
+      "==============================================================================\n",
+      "Omnibus:                       23.201   Durbin-Watson:                   1.861\n",
+      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               39.696\n",
+      "Skew:                           0.776   Prob(JB):                     2.40e-09\n",
+      "Kurtosis:                       5.063   Cond. No.                     2.73e+16\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
-      "[2] The smallest eigenvalue is 3.81e-32. This might indicate that there are\n",
+      "[2] The smallest eigenvalue is 5.01e-32. This might indicate that there are\n",
       "strong multicollinearity problems or that the design matrix is singular.\n",
       "               Var        Vif\n",
       "6            rotor        inf\n",
@@ -326,14 +267,14 @@
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "/usr/local/Cellar/ipython@5/5.6.0/libexec/vendor/lib/python2.7/site-packages/ipykernel_launcher.py:126: RuntimeWarning: divide by zero encountered in double_scalars\n"
+      "/usr/local/Cellar/ipython@5/5.6.0/libexec/vendor/lib/python2.7/site-packages/ipykernel_launcher.py:123: RuntimeWarning: divide by zero encountered in double_scalars\n"
      ]
     }
    ],
    "source": [
     "\n",
     "###########################Model 1#################\n",
-    "X_train_rfe = sm.add_constant(X_train_rfe)\n",
+    "# X_train_rfe = sm.add_constant(X_train_rfe)\n",
     "\n",
     "lm1 = sm.OLS(y_train, X_train_rfe).fit()\n",
     "\n",
@@ -344,7 +285,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 4,
    "metadata": {},
    "outputs": [
     {
@@ -354,37 +295,36 @@
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.939\n",
-      "Model:                            OLS   Adj. R-squared:                  0.933\n",
-      "Method:                 Least Squares   F-statistic:                     141.8\n",
-      "Date:                Sun, 24 Jun 2018   Prob (F-statistic):           1.03e-70\n",
-      "Time:                        02:46:56   Log-Likelihood:                 232.74\n",
-      "No. Observations:                 143   AIC:                            -435.5\n",
-      "Df Residuals:                     128   BIC:                            -391.0\n",
+      "Model:                            OLS   Adj. R-squared:                  0.932\n",
+      "Method:                 Least Squares   F-statistic:                     141.7\n",
+      "Date:                Sun, 24 Jun 2018   Prob (F-statistic):           4.54e-71\n",
+      "Time:                        16:48:27   Log-Likelihood:                 232.09\n",
+      "No. Observations:                 143   AIC:                            -436.2\n",
+      "Df Residuals:                     129   BIC:                            -394.7\n",
       "Df Model:                          14                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==================================================================================\n",
       "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
       "----------------------------------------------------------------------------------\n",
-      "const              0.0047      0.004      1.084      0.280      -0.004       0.013\n",
-      "enginelocation    -0.3151      0.067     -4.700      0.000      -0.448      -0.182\n",
-      "carwidth           0.3119      0.056      5.548      0.000       0.201       0.423\n",
-      "curbweight         0.3401      0.067      5.048      0.000       0.207       0.473\n",
-      "enginesize         1.1118      0.143      7.786      0.000       0.829       1.394\n",
-      "boreratio         -0.3576      0.054     -6.662      0.000      -0.464      -0.251\n",
-      "stroke            -0.2515      0.044     -5.666      0.000      -0.339      -0.164\n",
-      "rotor              0.4283      0.060      7.193      0.000       0.310       0.546\n",
-      "five               0.1421      0.029      4.819      0.000       0.084       0.200\n",
-      "four               0.2030      0.035      5.819      0.000       0.134       0.272\n",
-      "three              0.4091      0.067      6.095      0.000       0.276       0.542\n",
-      "twelve            -0.4008      0.088     -4.553      0.000      -0.575      -0.227\n",
-      "BMW                0.2535      0.024     10.632      0.000       0.206       0.301\n",
-      "PEUGEOT           -0.0981      0.024     -4.115      0.000      -0.145      -0.051\n",
-      "PORSCHE            0.1599      0.040      3.965      0.000       0.080       0.240\n",
-      "==============================================================================\n",
-      "Omnibus:                       22.727   Durbin-Watson:                   1.862\n",
-      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               38.186\n",
-      "Skew:                           0.769   Prob(JB):                     5.10e-09\n",
-      "Kurtosis:                       5.011   Cond. No.                         43.7\n",
+      "enginelocation    -0.3067      0.067     -4.602      0.000      -0.439      -0.175\n",
+      "carwidth           0.3086      0.056      5.494      0.000       0.197       0.420\n",
+      "curbweight         0.3417      0.067      5.070      0.000       0.208       0.475\n",
+      "enginesize         1.0923      0.142      7.706      0.000       0.812       1.373\n",
+      "boreratio         -0.3531      0.054     -6.594      0.000      -0.459      -0.247\n",
+      "stroke            -0.2479      0.044     -5.596      0.000      -0.336      -0.160\n",
+      "rotor              0.4206      0.059      7.110      0.000       0.304       0.538\n",
+      "five               0.1397      0.029      4.748      0.000       0.081       0.198\n",
+      "four               0.1965      0.034      5.714      0.000       0.128       0.265\n",
+      "three              0.4015      0.067      6.011      0.000       0.269       0.534\n",
+      "twelve            -0.3893      0.087     -4.452      0.000      -0.562      -0.216\n",
+      "BMW                0.2527      0.024     10.598      0.000       0.206       0.300\n",
+      "PEUGEOT           -0.0962      0.024     -4.044      0.000      -0.143      -0.049\n",
+      "PORSCHE            0.1623      0.040      4.028      0.000       0.083       0.242\n",
+      "==============================================================================\n",
+      "Omnibus:                       23.201   Durbin-Watson:                   1.861\n",
+      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               39.696\n",
+      "Skew:                           0.776   Prob(JB):                     2.40e-09\n",
+      "Kurtosis:                       5.063   Cond. No.                         22.1\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
@@ -420,7 +360,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 5,
    "metadata": {},
    "outputs": [
     {
@@ -431,35 +371,34 @@
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.911\n",
       "Model:                            OLS   Adj. R-squared:                  0.902\n",
-      "Method:                 Least Squares   F-statistic:                     101.3\n",
-      "Date:                Sun, 24 Jun 2018   Prob (F-statistic):           5.01e-61\n",
-      "Time:                        02:47:02   Log-Likelihood:                 205.02\n",
-      "No. Observations:                 143   AIC:                            -382.0\n",
-      "Df Residuals:                     129   BIC:                            -340.6\n",
+      "Method:                 Least Squares   F-statistic:                     102.1\n",
+      "Date:                Sun, 24 Jun 2018   Prob (F-statistic):           1.49e-61\n",
+      "Time:                        16:48:31   Log-Likelihood:                 205.01\n",
+      "No. Observations:                 143   AIC:                            -384.0\n",
+      "Df Residuals:                     130   BIC:                            -345.5\n",
       "Df Model:                          13                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==================================================================================\n",
       "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
       "----------------------------------------------------------------------------------\n",
-      "const              0.0005      0.005      0.089      0.929      -0.010       0.011\n",
-      "enginelocation    -0.3837      0.080     -4.775      0.000      -0.543      -0.225\n",
-      "carwidth           0.3383      0.068      4.985      0.000       0.204       0.473\n",
-      "curbweight         0.5754      0.073      7.902      0.000       0.431       0.720\n",
-      "boreratio         -0.0906      0.050     -1.815      0.072      -0.189       0.008\n",
-      "stroke            -0.0268      0.041     -0.656      0.513      -0.107       0.054\n",
-      "rotor              0.0408      0.040      1.032      0.304      -0.037       0.119\n",
-      "five              -0.0092      0.027     -0.342      0.733      -0.062       0.044\n",
-      "four              -0.0046      0.027     -0.170      0.866      -0.058       0.049\n",
-      "three              0.1737      0.072      2.397      0.018       0.030       0.317\n",
-      "twelve             0.1370      0.066      2.075      0.040       0.006       0.268\n",
-      "BMW                0.2401      0.029      8.351      0.000       0.183       0.297\n",
-      "PEUGEOT           -0.1338      0.028     -4.731      0.000      -0.190      -0.078\n",
-      "PORSCHE            0.1434      0.049      2.945      0.004       0.047       0.240\n",
-      "==============================================================================\n",
-      "Omnibus:                       21.617   Durbin-Watson:                   2.028\n",
-      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               45.220\n",
-      "Skew:                           0.641   Prob(JB):                     1.52e-10\n",
-      "Kurtosis:                       5.439   Cond. No.                         19.3\n",
+      "enginelocation    -0.3827      0.079     -4.825      0.000      -0.540      -0.226\n",
+      "carwidth           0.3379      0.067      5.009      0.000       0.204       0.471\n",
+      "curbweight         0.5752      0.072      7.935      0.000       0.432       0.719\n",
+      "boreratio         -0.0906      0.050     -1.822      0.071      -0.189       0.008\n",
+      "stroke            -0.0268      0.041     -0.659      0.511      -0.107       0.054\n",
+      "rotor              0.0407      0.039      1.034      0.303      -0.037       0.119\n",
+      "five              -0.0091      0.027     -0.342      0.733      -0.062       0.044\n",
+      "four              -0.0049      0.027     -0.182      0.856      -0.058       0.048\n",
+      "three              0.1734      0.072      2.405      0.018       0.031       0.316\n",
+      "twelve             0.1372      0.066      2.088      0.039       0.007       0.267\n",
+      "BMW                0.2401      0.029      8.383      0.000       0.183       0.297\n",
+      "PEUGEOT           -0.1335      0.028     -4.764      0.000      -0.189      -0.078\n",
+      "PORSCHE            0.1437      0.048      2.968      0.004       0.048       0.239\n",
+      "==============================================================================\n",
+      "Omnibus:                       21.646   Durbin-Watson:                   2.029\n",
+      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               45.311\n",
+      "Skew:                           0.641   Prob(JB):                     1.45e-10\n",
+      "Kurtosis:                       5.441   Cond. No.                         9.53\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
@@ -494,7 +433,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 6,
    "metadata": {},
    "outputs": [
     {
@@ -505,34 +444,33 @@
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.911\n",
       "Model:                            OLS   Adj. R-squared:                  0.903\n",
-      "Method:                 Least Squares   F-statistic:                     110.5\n",
-      "Date:                Sun, 24 Jun 2018   Prob (F-statistic):           4.72e-62\n",
-      "Time:                        02:47:10   Log-Likelihood:                 205.00\n",
-      "No. Observations:                 143   AIC:                            -384.0\n",
-      "Df Residuals:                     130   BIC:                            -345.5\n",
+      "Method:                 Least Squares   F-statistic:                     111.5\n",
+      "Date:                Sun, 24 Jun 2018   Prob (F-statistic):           1.40e-62\n",
+      "Time:                        16:48:35   Log-Likelihood:                 205.00\n",
+      "No. Observations:                 143   AIC:                            -386.0\n",
+      "Df Residuals:                     131   BIC:                            -350.4\n",
       "Df Model:                          12                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==================================================================================\n",
       "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
       "----------------------------------------------------------------------------------\n",
-      "const              0.0006      0.005      0.110      0.913      -0.010       0.011\n",
-      "enginelocation    -0.3869      0.078     -4.969      0.000      -0.541      -0.233\n",
-      "carwidth           0.3400      0.067      5.089      0.000       0.208       0.472\n",
-      "curbweight         0.5831      0.057     10.242      0.000       0.470       0.696\n",
-      "boreratio         -0.0953      0.041     -2.304      0.023      -0.177      -0.013\n",
-      "stroke            -0.0284      0.039     -0.720      0.473      -0.106       0.050\n",
-      "rotor              0.0449      0.031      1.453      0.149      -0.016       0.106\n",
-      "five              -0.0075      0.025     -0.302      0.763      -0.057       0.042\n",
-      "three              0.1798      0.063      2.867      0.005       0.056       0.304\n",
-      "twelve             0.1362      0.066      2.076      0.040       0.006       0.266\n",
-      "BMW                0.2421      0.026      9.193      0.000       0.190       0.294\n",
-      "PEUGEOT           -0.1362      0.024     -5.586      0.000      -0.184      -0.088\n",
-      "PORSCHE            0.1446      0.048      3.009      0.003       0.050       0.240\n",
-      "==============================================================================\n",
-      "Omnibus:                       21.645   Durbin-Watson:                   2.023\n",
-      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               45.814\n",
-      "Skew:                           0.637   Prob(JB):                     1.13e-10\n",
-      "Kurtosis:                       5.463   Cond. No.                         19.0\n",
+      "enginelocation    -0.3859      0.077     -5.007      0.000      -0.538      -0.233\n",
+      "carwidth           0.3397      0.067      5.108      0.000       0.208       0.471\n",
+      "curbweight         0.5834      0.057     10.296      0.000       0.471       0.695\n",
+      "boreratio         -0.0957      0.041     -2.330      0.021      -0.177      -0.014\n",
+      "stroke            -0.0286      0.039     -0.727      0.469      -0.106       0.049\n",
+      "rotor              0.0452      0.031      1.469      0.144      -0.016       0.106\n",
+      "five              -0.0074      0.025     -0.297      0.767      -0.056       0.042\n",
+      "three              0.1798      0.062      2.879      0.005       0.056       0.303\n",
+      "twelve             0.1364      0.065      2.088      0.039       0.007       0.266\n",
+      "BMW                0.2421      0.026      9.234      0.000       0.190       0.294\n",
+      "PEUGEOT           -0.1361      0.024     -5.608      0.000      -0.184      -0.088\n",
+      "PORSCHE            0.1450      0.048      3.039      0.003       0.051       0.239\n",
+      "==============================================================================\n",
+      "Omnibus:                       21.683   Durbin-Watson:                   2.023\n",
+      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               45.977\n",
+      "Skew:                           0.637   Prob(JB):                     1.04e-10\n",
+      "Kurtosis:                       5.468   Cond. No.                         6.23\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
@@ -566,7 +504,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 7,
    "metadata": {},
    "outputs": [
     {
@@ -577,33 +515,32 @@
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.911\n",
       "Model:                            OLS   Adj. R-squared:                  0.903\n",
-      "Method:                 Least Squares   F-statistic:                     121.4\n",
-      "Date:                Sun, 24 Jun 2018   Prob (F-statistic):           4.37e-63\n",
-      "Time:                        02:47:53   Log-Likelihood:                 204.95\n",
-      "No. Observations:                 143   AIC:                            -385.9\n",
-      "Df Residuals:                     131   BIC:                            -350.3\n",
+      "Method:                 Least Squares   F-statistic:                     122.5\n",
+      "Date:                Sun, 24 Jun 2018   Prob (F-statistic):           1.29e-63\n",
+      "Time:                        16:48:38   Log-Likelihood:                 204.95\n",
+      "No. Observations:                 143   AIC:                            -387.9\n",
+      "Df Residuals:                     132   BIC:                            -355.3\n",
       "Df Model:                          11                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==================================================================================\n",
       "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
       "----------------------------------------------------------------------------------\n",
-      "const              0.0005      0.005      0.093      0.926      -0.010       0.011\n",
-      "enginelocation    -0.3840      0.077     -4.988      0.000      -0.536      -0.232\n",
-      "carwidth           0.3321      0.061      5.419      0.000       0.211       0.453\n",
-      "curbweight         0.5840      0.057     10.310      0.000       0.472       0.696\n",
-      "boreratio         -0.0925      0.040     -2.302      0.023      -0.172      -0.013\n",
-      "stroke            -0.0279      0.039     -0.711      0.478      -0.106       0.050\n",
-      "rotor              0.0455      0.031      1.479      0.142      -0.015       0.106\n",
-      "three              0.1780      0.062      2.862      0.005       0.055       0.301\n",
-      "twelve             0.1390      0.065      2.151      0.033       0.011       0.267\n",
-      "BMW                0.2428      0.026      9.298      0.000       0.191       0.295\n",
-      "PEUGEOT           -0.1347      0.024     -5.660      0.000      -0.182      -0.088\n",
-      "PORSCHE            0.1467      0.047      3.098      0.002       0.053       0.240\n",
-      "==============================================================================\n",
-      "Omnibus:                       22.405   Durbin-Watson:                   2.026\n",
-      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               48.286\n",
-      "Skew:                           0.654   Prob(JB):                     3.27e-11\n",
-      "Kurtosis:                       5.529   Cond. No.                         18.4\n",
+      "enginelocation    -0.3832      0.076     -5.024      0.000      -0.534      -0.232\n",
+      "carwidth           0.3320      0.061      5.439      0.000       0.211       0.453\n",
+      "curbweight         0.5842      0.056     10.361      0.000       0.473       0.696\n",
+      "boreratio         -0.0929      0.040     -2.332      0.021      -0.172      -0.014\n",
+      "stroke            -0.0281      0.039     -0.718      0.474      -0.105       0.049\n",
+      "rotor              0.0457      0.031      1.492      0.138      -0.015       0.106\n",
+      "three              0.1781      0.062      2.874      0.005       0.055       0.301\n",
+      "twelve             0.1392      0.064      2.161      0.032       0.012       0.267\n",
+      "BMW                0.2429      0.026      9.338      0.000       0.191       0.294\n",
+      "PEUGEOT           -0.1346      0.024     -5.682      0.000      -0.181      -0.088\n",
+      "PORSCHE            0.1470      0.047      3.125      0.002       0.054       0.240\n",
+      "==============================================================================\n",
+      "Omnibus:                       22.424   Durbin-Watson:                   2.026\n",
+      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               48.382\n",
+      "Skew:                           0.654   Prob(JB):                     3.12e-11\n",
+      "Kurtosis:                       5.532   Cond. No.                         5.88\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
@@ -637,7 +574,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": 8,
    "metadata": {},
    "outputs": [
     {
@@ -648,32 +585,31 @@
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.910\n",
       "Model:                            OLS   Adj. R-squared:                  0.904\n",
-      "Method:                 Least Squares   F-statistic:                     134.0\n",
-      "Date:                Sun, 24 Jun 2018   Prob (F-statistic):           4.72e-64\n",
-      "Time:                        02:50:26   Log-Likelihood:                 204.68\n",
-      "No. Observations:                 143   AIC:                            -387.4\n",
-      "Df Residuals:                     132   BIC:                            -354.8\n",
+      "Method:                 Least Squares   F-statistic:                     135.1\n",
+      "Date:                Sun, 24 Jun 2018   Prob (F-statistic):           1.39e-64\n",
+      "Time:                        16:48:42   Log-Likelihood:                 204.67\n",
+      "No. Observations:                 143   AIC:                            -389.3\n",
+      "Df Residuals:                     133   BIC:                            -359.7\n",
       "Df Model:                          10                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==================================================================================\n",
       "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
       "----------------------------------------------------------------------------------\n",
-      "const              0.0006      0.005      0.121      0.904      -0.009       0.011\n",
-      "enginelocation    -0.3848      0.077     -5.008      0.000      -0.537      -0.233\n",
-      "carwidth           0.3263      0.061      5.382      0.000       0.206       0.446\n",
-      "curbweight         0.5767      0.056     10.374      0.000       0.467       0.687\n",
-      "boreratio         -0.0819      0.037     -2.199      0.030      -0.156      -0.008\n",
-      "rotor              0.0451      0.031      1.468      0.145      -0.016       0.106\n",
-      "three              0.1785      0.062      2.875      0.005       0.056       0.301\n",
-      "twelve             0.1504      0.063      2.405      0.018       0.027       0.274\n",
-      "BMW                0.2445      0.026      9.413      0.000       0.193       0.296\n",
-      "PEUGEOT           -0.1332      0.024     -5.630      0.000      -0.180      -0.086\n",
-      "PORSCHE            0.1477      0.047      3.126      0.002       0.054       0.241\n",
-      "==============================================================================\n",
-      "Omnibus:                       22.096   Durbin-Watson:                   1.985\n",
-      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               45.356\n",
-      "Skew:                           0.664   Prob(JB):                     1.42e-10\n",
-      "Kurtosis:                       5.419   Cond. No.                         18.3\n",
+      "enginelocation    -0.3838      0.076     -5.042      0.000      -0.534      -0.233\n",
+      "carwidth           0.3261      0.060      5.401      0.000       0.207       0.446\n",
+      "curbweight         0.5769      0.055     10.422      0.000       0.467       0.686\n",
+      "boreratio         -0.0823      0.037     -2.228      0.028      -0.155      -0.009\n",
+      "rotor              0.0453      0.031      1.483      0.140      -0.015       0.106\n",
+      "three              0.1786      0.062      2.888      0.005       0.056       0.301\n",
+      "twelve             0.1506      0.062      2.419      0.017       0.027       0.274\n",
+      "BMW                0.2445      0.026      9.454      0.000       0.193       0.296\n",
+      "PEUGEOT           -0.1331      0.024     -5.651      0.000      -0.180      -0.087\n",
+      "PORSCHE            0.1481      0.047      3.156      0.002       0.055       0.241\n",
+      "==============================================================================\n",
+      "Omnibus:                       22.121   Durbin-Watson:                   1.985\n",
+      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               45.455\n",
+      "Skew:                           0.664   Prob(JB):                     1.35e-10\n",
+      "Kurtosis:                       5.422   Cond. No.                         5.87\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
@@ -704,6 +640,495 @@
     "print(vif_cal(input_data=final_car_prices.drop(['five',\"enginesize\", \"two\", 'four', 'stroke'], axis=1), dependent_col=\"price\"))\n"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": 9,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "                            OLS Regression Results                            \n",
+      "==============================================================================\n",
+      "Dep. Variable:                  price   R-squared:                       0.909\n",
+      "Model:                            OLS   Adj. R-squared:                  0.903\n",
+      "Method:                 Least Squares   F-statistic:                     148.6\n",
+      "Date:                Sun, 24 Jun 2018   Prob (F-statistic):           3.27e-65\n",
+      "Time:                        16:48:45   Log-Likelihood:                 203.50\n",
+      "No. Observations:                 143   AIC:                            -389.0\n",
+      "Df Residuals:                     134   BIC:                            -362.3\n",
+      "Df Model:                           9                                         \n",
+      "Covariance Type:            nonrobust                                         \n",
+      "==================================================================================\n",
+      "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
+      "----------------------------------------------------------------------------------\n",
+      "enginelocation    -0.3849      0.076     -5.033      0.000      -0.536      -0.234\n",
+      "carwidth           0.3303      0.061      5.453      0.000       0.211       0.450\n",
+      "curbweight         0.5713      0.055     10.299      0.000       0.462       0.681\n",
+      "boreratio         -0.0790      0.037     -2.133      0.035      -0.152      -0.006\n",
+      "three              0.1779      0.062      2.863      0.005       0.055       0.301\n",
+      "twelve             0.1501      0.063      2.400      0.018       0.026       0.274\n",
+      "BMW                0.2434      0.026      9.373      0.000       0.192       0.295\n",
+      "PEUGEOT           -0.1346      0.024     -5.696      0.000      -0.181      -0.088\n",
+      "PORSCHE            0.1449      0.047      3.076      0.003       0.052       0.238\n",
+      "==============================================================================\n",
+      "Omnibus:                       20.638   Durbin-Watson:                   1.979\n",
+      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               40.093\n",
+      "Skew:                           0.639   Prob(JB):                     1.97e-09\n",
+      "Kurtosis:                       5.257   Cond. No.                         5.86\n",
+      "==============================================================================\n",
+      "\n",
+      "Warnings:\n",
+      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
+      "              Var   Vif\n",
+      "2      curbweight  5.46\n",
+      "1        carwidth  4.62\n",
+      "8         PORSCHE  2.79\n",
+      "0  enginelocation  2.74\n",
+      "3       boreratio  1.91\n",
+      "7         PEUGEOT  1.13\n",
+      "5          twelve  1.06\n",
+      "6             BMW  1.06\n",
+      "4           three  1.04\n"
+     ]
+    }
+   ],
+   "source": [
+    "###########################Model 7 ################\n",
+    "X_train_rfe = X_train_rfe.drop('rotor', 1)\n",
+    "\n",
+    "lm7= sm.OLS(y_train, X_train_rfe).fit()\n",
+    "\n",
+    "print(lm7.summary())\n",
+    "\n",
+    "print(vif_cal(input_data=final_car_prices.drop(['five',\"enginesize\", \"two\", 'four', 'stroke', 'rotor'], axis=1), dependent_col=\"price\"))\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 10,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "                            OLS Regression Results                            \n",
+      "==============================================================================\n",
+      "Dep. Variable:                  price   R-squared:                       0.889\n",
+      "Model:                            OLS   Adj. R-squared:                  0.882\n",
+      "Method:                 Least Squares   F-statistic:                     134.8\n",
+      "Date:                Sun, 24 Jun 2018   Prob (F-statistic):           1.71e-60\n",
+      "Time:                        16:48:48   Log-Likelihood:                 189.17\n",
+      "No. Observations:                 143   AIC:                            -362.3\n",
+      "Df Residuals:                     135   BIC:                            -338.6\n",
+      "Df Model:                           8                                         \n",
+      "Covariance Type:            nonrobust                                         \n",
+      "==================================================================================\n",
+      "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
+      "----------------------------------------------------------------------------------\n",
+      "enginelocation    -0.2707      0.081     -3.343      0.001      -0.431      -0.111\n",
+      "curbweight         0.8153      0.036     22.584      0.000       0.744       0.887\n",
+      "boreratio         -0.0734      0.041     -1.799      0.074      -0.154       0.007\n",
+      "three              0.1259      0.068      1.863      0.065      -0.008       0.260\n",
+      "twelve             0.1461      0.069      2.122      0.036       0.010       0.282\n",
+      "BMW                0.2251      0.028      7.937      0.000       0.169       0.281\n",
+      "PEUGEOT           -0.1315      0.026     -5.054      0.000      -0.183      -0.080\n",
+      "PORSCHE            0.2141      0.050      4.288      0.000       0.115       0.313\n",
+      "==============================================================================\n",
+      "Omnibus:                       18.910   Durbin-Watson:                   1.953\n",
+      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               81.735\n",
+      "Skew:                          -0.152   Prob(JB):                     1.78e-18\n",
+      "Kurtosis:                       6.691   Cond. No.                         4.44\n",
+      "==============================================================================\n",
+      "\n",
+      "Warnings:\n",
+      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
+      "              Var   Vif\n",
+      "7         PORSCHE  2.63\n",
+      "0  enginelocation  2.47\n",
+      "1      curbweight  1.96\n",
+      "2       boreratio  1.91\n",
+      "6         PEUGEOT  1.13\n",
+      "4          twelve  1.05\n",
+      "5             BMW  1.04\n",
+      "3           three  1.02\n"
+     ]
+    }
+   ],
+   "source": [
+    "##########################Model 8 ################\n",
+    "\n",
+    "X_train_rfe = X_train_rfe.drop('carwidth', 1)\n",
+    "\n",
+    "lm8= sm.OLS(y_train, X_train_rfe).fit()\n",
+    "\n",
+    "print(lm8.summary())\n",
+    "\n",
+    "print(vif_cal(input_data=final_car_prices.drop(['five',\"enginesize\", \"two\", 'four', 'stroke', 'rotor', 'carwidth'], axis=1), dependent_col=\"price\"))\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 11,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "                            OLS Regression Results                            \n",
+      "==============================================================================\n",
+      "Dep. Variable:                  price   R-squared:                       0.886\n",
+      "Model:                            OLS   Adj. R-squared:                  0.880\n",
+      "Method:                 Least Squares   F-statistic:                     151.1\n",
+      "Date:                Sun, 24 Jun 2018   Prob (F-statistic):           6.57e-61\n",
+      "Time:                        16:48:51   Log-Likelihood:                 187.47\n",
+      "No. Observations:                 143   AIC:                            -360.9\n",
+      "Df Residuals:                     136   BIC:                            -340.2\n",
+      "Df Model:                           7                                         \n",
+      "Covariance Type:            nonrobust                                         \n",
+      "==================================================================================\n",
+      "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
+      "----------------------------------------------------------------------------------\n",
+      "enginelocation    -0.2755      0.082     -3.376      0.001      -0.437      -0.114\n",
+      "curbweight         0.7788      0.030     25.861      0.000       0.719       0.838\n",
+      "three              0.1313      0.068      1.928      0.056      -0.003       0.266\n",
+      "twelve             0.1533      0.069      2.212      0.029       0.016       0.290\n",
+      "BMW                0.2232      0.029      7.810      0.000       0.167       0.280\n",
+      "PEUGEOT           -0.1378      0.026     -5.302      0.000      -0.189      -0.086\n",
+      "PORSCHE            0.1879      0.048      3.902      0.000       0.093       0.283\n",
+      "==============================================================================\n",
+      "Omnibus:                       14.153   Durbin-Watson:                   1.924\n",
+      "Prob(Omnibus):                  0.001   Jarque-Bera (JB):               46.303\n",
+      "Skew:                          -0.022   Prob(JB):                     8.82e-11\n",
+      "Kurtosis:                       5.787   Cond. No.                         3.97\n",
+      "==============================================================================\n",
+      "\n",
+      "Warnings:\n",
+      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
+      "              Var   Vif\n",
+      "6         PORSCHE  2.50\n",
+      "0  enginelocation  2.47\n",
+      "1      curbweight  1.24\n",
+      "5         PEUGEOT  1.13\n",
+      "3          twelve  1.05\n",
+      "4             BMW  1.04\n",
+      "2           three  1.02\n"
+     ]
+    }
+   ],
+   "source": [
+    "##########################Model 9 ################\n",
+    "\n",
+    "X_train_rfe = X_train_rfe.drop('boreratio', 1)\n",
+    "\n",
+    "lm9= sm.OLS(y_train, X_train_rfe).fit()\n",
+    "\n",
+    "print(lm9.summary())\n",
+    "\n",
+    "print(vif_cal(input_data=final_car_prices.drop(['boreratio','five',\"enginesize\", \"two\", 'four', 'stroke', 'rotor', 'carwidth'], axis=1), dependent_col=\"price\"))\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 12,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "                            OLS Regression Results                            \n",
+      "==============================================================================\n",
+      "Dep. Variable:                  price   R-squared:                       0.873\n",
+      "Model:                            OLS   Adj. R-squared:                  0.868\n",
+      "Method:                 Least Squares   F-statistic:                     157.4\n",
+      "Date:                Sun, 24 Jun 2018   Prob (F-statistic):           6.58e-59\n",
+      "Time:                        16:48:54   Log-Likelihood:                 179.89\n",
+      "No. Observations:                 143   AIC:                            -347.8\n",
+      "Df Residuals:                     137   BIC:                            -330.0\n",
+      "Df Model:                           6                                         \n",
+      "Covariance Type:            nonrobust                                         \n",
+      "==================================================================================\n",
+      "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
+      "----------------------------------------------------------------------------------\n",
+      "enginelocation    -0.4575      0.070     -6.503      0.000      -0.597      -0.318\n",
+      "curbweight         0.7961      0.031     25.435      0.000       0.734       0.858\n",
+      "three              0.1352      0.072      1.889      0.061      -0.006       0.277\n",
+      "twelve             0.1407      0.073      1.934      0.055      -0.003       0.285\n",
+      "BMW                0.2169      0.030      7.237      0.000       0.158       0.276\n",
+      "PEUGEOT           -0.1459      0.027     -5.357      0.000      -0.200      -0.092\n",
+      "==============================================================================\n",
+      "Omnibus:                       12.730   Durbin-Watson:                   1.967\n",
+      "Prob(Omnibus):                  0.002   Jarque-Bera (JB):               37.072\n",
+      "Skew:                           0.051   Prob(JB):                     8.91e-09\n",
+      "Kurtosis:                       5.492   Cond. No.                         3.22\n",
+      "==============================================================================\n",
+      "\n",
+      "Warnings:\n",
+      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
+      "              Var   Vif\n",
+      "1      curbweight  1.22\n",
+      "5         PEUGEOT  1.13\n",
+      "3          twelve  1.05\n",
+      "4             BMW  1.04\n",
+      "2           three  1.02\n",
+      "0  enginelocation  1.01\n"
+     ]
+    }
+   ],
+   "source": [
+    "##########################Model 10 ################\n",
+    "\n",
+    "X_train_rfe = X_train_rfe.drop('PORSCHE', 1)\n",
+    "\n",
+    "lm10= sm.OLS(y_train, X_train_rfe).fit()\n",
+    "\n",
+    "print(lm10.summary())\n",
+    "\n",
+    "print(vif_cal(input_data=final_car_prices.drop(['PORSCHE','boreratio','five',\"enginesize\", \"two\", 'four', 'stroke', 'rotor', 'carwidth'], axis=1), dependent_col=\"price\"))\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 13,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "                            OLS Regression Results                            \n",
+      "==============================================================================\n",
+      "Dep. Variable:                  price   R-squared:                       0.870\n",
+      "Model:                            OLS   Adj. R-squared:                  0.865\n",
+      "Method:                 Least Squares   F-statistic:                     184.7\n",
+      "Date:                Sun, 24 Jun 2018   Prob (F-statistic):           2.65e-59\n",
+      "Time:                        16:48:57   Log-Likelihood:                 178.05\n",
+      "No. Observations:                 143   AIC:                            -346.1\n",
+      "Df Residuals:                     138   BIC:                            -331.3\n",
+      "Df Model:                           5                                         \n",
+      "Covariance Type:            nonrobust                                         \n",
+      "==================================================================================\n",
+      "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
+      "----------------------------------------------------------------------------------\n",
+      "enginelocation    -0.4574      0.071     -6.441      0.000      -0.598      -0.317\n",
+      "curbweight         0.7862      0.031     25.245      0.000       0.725       0.848\n",
+      "twelve             0.1454      0.073      1.982      0.049       0.000       0.291\n",
+      "BMW                0.2178      0.030      7.201      0.000       0.158       0.278\n",
+      "PEUGEOT           -0.1440      0.027     -5.242      0.000      -0.198      -0.090\n",
+      "==============================================================================\n",
+      "Omnibus:                       12.310   Durbin-Watson:                   1.947\n",
+      "Prob(Omnibus):                  0.002   Jarque-Bera (JB):               33.138\n",
+      "Skew:                           0.125   Prob(JB):                     6.37e-08\n",
+      "Kurtosis:                       5.345   Cond. No.                         3.18\n",
+      "==============================================================================\n",
+      "\n",
+      "Warnings:\n",
+      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
+      "              Var   Vif\n",
+      "1      curbweight  1.19\n",
+      "4         PEUGEOT  1.12\n",
+      "2          twelve  1.05\n",
+      "3             BMW  1.04\n",
+      "0  enginelocation  1.01\n"
+     ]
+    }
+   ],
+   "source": [
+    "##########################Model 11 ################\n",
+    "\n",
+    "X_train_rfe = X_train_rfe.drop('three', 1)\n",
+    "\n",
+    "lm11= sm.OLS(y_train, X_train_rfe).fit()\n",
+    "\n",
+    "print(lm11.summary())\n",
+    "\n",
+    "print(vif_cal(input_data=final_car_prices.drop(['three','PORSCHE','boreratio','five',\"enginesize\", \"two\", 'four', 'stroke', 'rotor', 'carwidth'], axis=1), dependent_col=\"price\"))\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 14,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "Text(0,0.5,'Car Price')"
+      ]
+     },
+     "execution_count": 14,
+     "metadata": {},
+     "output_type": "execute_result"
+    },
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "%matplotlib inline\n",
+    "\n",
+    "X_test = X_test[['enginelocation', 'curbweight', 'three', 'twelve', 'BMW', 'PEUGEOT']]\n",
+    "y_pred = lm10.predict(X_test)\n",
+    "\n",
+    "# print \"X_train\", X_train_rfe.shape\n",
+    "# print \"X_test\", X_test_rfe.shape\n",
+    "\n",
+    "# print \"y_test\", y_test.shape\n",
+    "# print \"y_pred_rfe\", y_pred_rfe.shape\n",
+    "\n",
+    "\n",
+    " # Actual vs Predicted\n",
+    "c = [i for i in range(0,62,1)]\n",
+    "fig = plt.figure()\n",
+    "plt.plot(c,y_test, color=\"blue\", linewidth=2.5, linestyle=\"-\")\n",
+    "plt.plot(c,y_pred, color=\"red\",  linewidth=2.5, linestyle=\"-\")\n",
+    "fig.suptitle('Actual and Predicted', fontsize=20)\n",
+    "plt.xlabel('Index', fontsize=18)\n",
+    "plt.ylabel('Car Price', fontsize=16)                     "
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 15,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "Text(0,0.5,'ytest-ypred')"
+      ]
+     },
+     "execution_count": 15,
+     "metadata": {},
+     "output_type": "execute_result"
+    },
+    {
+     "data": {
+      "image/png": "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\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "c = [i for i in range(0,62,1)]\n",
+    "fig = plt.figure()\n",
+    "plt.plot(c,y_test-y_pred, color=\"blue\", linewidth=2.5, linestyle=\"-\")\n",
+    "fig.suptitle('Error Terms', fontsize=20)              # Plot heading \n",
+    "plt.xlabel('Index', fontsize=18)                      # X-label\n",
+    "plt.ylabel('ytest-ypred', fontsize=16)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 16,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "Text(0,0.5,'y_pred')"
+      ]
+     },
+     "execution_count": 16,
+     "metadata": {},
+     "output_type": "execute_result"
+    },
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "# Plotting y_test and y_pred to understand the spread.\n",
+    "fig = plt.figure()\n",
+    "plt.scatter(y_test,y_pred)\n",
+    "fig.suptitle('y_test vs y_pred', fontsize=20)              # Plot heading \n",
+    "plt.xlabel('y_test', fontsize=18)                          # X-label\n",
+    "plt.ylabel('y_pred', fontsize=16)                          # Y-label"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 17,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/usr/local/lib/python2.7/site-packages/matplotlib/axes/_axes.py:6462: UserWarning: The 'normed' kwarg is deprecated, and has been replaced by the 'density' kwarg.\n",
+      "  warnings.warn(\"The 'normed' kwarg is deprecated, and has been \"\n"
+     ]
+    },
+    {
+     "data": {
+      "text/plain": [
+       "Text(0,0.5,'Index')"
+      ]
+     },
+     "execution_count": 17,
+     "metadata": {},
+     "output_type": "execute_result"
+    },
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "fig = plt.figure()\n",
+    "sns.distplot((y_test-y_pred),bins=50)\n",
+    "fig.suptitle('Error Terms', fontsize=20)                  # Plot heading \n",
+    "plt.xlabel('y_test-y_pred', fontsize=18)                  # X-label\n",
+    "plt.ylabel('Index', fontsize=16)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 18,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "('RMSE :', 0.08869393624173198)\n"
+     ]
+    }
+   ],
+   "source": [
+    "import numpy as np\n",
+    "from sklearn import metrics\n",
+    "print('RMSE :', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))"
+   ]
+  },
   {
    "cell_type": "code",
    "execution_count": null,
